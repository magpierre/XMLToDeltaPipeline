/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.magnusp;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class DataExport extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5446948363818008329L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DataExport\",\"namespace\":\"com.magnusp\",\"fields\":[{\"name\":\"rownr\",\"type\":\"long\"},{\"name\":\"levels\",\"type\":{\"type\":\"record\",\"name\":\"Levels\",\"fields\":[{\"name\":\"L1\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Level\",\"fields\":[{\"name\":\"node\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"attr_key\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"attr_value\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"L2\",\"type\":[\"null\",\"Level\"],\"default\":null},{\"name\":\"L3\",\"type\":[\"null\",\"Level\"],\"default\":null},{\"name\":\"L4\",\"type\":[\"null\",\"Level\"],\"default\":null},{\"name\":\"L5\",\"type\":[\"null\",\"Level\"],\"default\":null},{\"name\":\"L6\",\"type\":[\"null\",\"Level\"],\"default\":null},{\"name\":\"L7\",\"type\":[\"null\",\"Level\"],\"default\":null},{\"name\":\"L8\",\"type\":[\"null\",\"Level\"],\"default\":null},{\"name\":\"L9\",\"type\":[\"null\",\"Level\"],\"default\":null},{\"name\":\"L10\",\"type\":[\"null\",\"Level\"],\"default\":null},{\"name\":\"L11\",\"type\":[\"null\",\"Level\"],\"default\":null},{\"name\":\"L12\",\"type\":[\"null\",\"Level\"],\"default\":null},{\"name\":\"L13\",\"type\":[\"null\",\"Level\"],\"default\":null},{\"name\":\"L14\",\"type\":[\"null\",\"Level\"],\"default\":null},{\"name\":\"L15\",\"type\":[\"null\",\"Level\"],\"default\":null},{\"name\":\"L16\",\"type\":[\"null\",\"Level\"],\"default\":null},{\"name\":\"L17\",\"type\":[\"null\",\"Level\"],\"default\":null},{\"name\":\"L18\",\"type\":[\"null\",\"Level\"],\"default\":null},{\"name\":\"L19\",\"type\":[\"null\",\"Level\"],\"default\":null},{\"name\":\"L20\",\"type\":[\"null\",\"Level\"],\"default\":null}]}},{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long rownr;
  @Deprecated public com.magnusp.Levels levels;
  @Deprecated public java.lang.CharSequence key;
  @Deprecated public java.lang.CharSequence value;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DataExport() {}

  /**
   * All-args constructor.
   * @param rownr The new value for rownr
   * @param levels The new value for levels
   * @param key The new value for key
   * @param value The new value for value
   */
  public DataExport(java.lang.Long rownr, com.magnusp.Levels levels, java.lang.CharSequence key, java.lang.CharSequence value) {
    this.rownr = rownr;
    this.levels = levels;
    this.key = key;
    this.value = value;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return rownr;
    case 1: return levels;
    case 2: return key;
    case 3: return value;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: rownr = (java.lang.Long)value$; break;
    case 1: levels = (com.magnusp.Levels)value$; break;
    case 2: key = (java.lang.CharSequence)value$; break;
    case 3: value = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'rownr' field.
   * @return The value of the 'rownr' field.
   */
  public java.lang.Long getRownr() {
    return rownr;
  }

  /**
   * Sets the value of the 'rownr' field.
   * @param value the value to set.
   */
  public void setRownr(java.lang.Long value) {
    this.rownr = value;
  }

  /**
   * Gets the value of the 'levels' field.
   * @return The value of the 'levels' field.
   */
  public com.magnusp.Levels getLevels() {
    return levels;
  }

  /**
   * Sets the value of the 'levels' field.
   * @param value the value to set.
   */
  public void setLevels(com.magnusp.Levels value) {
    this.levels = value;
  }

  /**
   * Gets the value of the 'key' field.
   * @return The value of the 'key' field.
   */
  public java.lang.CharSequence getKey() {
    return key;
  }

  /**
   * Sets the value of the 'key' field.
   * @param value the value to set.
   */
  public void setKey(java.lang.CharSequence value) {
    this.key = value;
  }

  /**
   * Gets the value of the 'value' field.
   * @return The value of the 'value' field.
   */
  public java.lang.CharSequence getValue() {
    return value;
  }

  /**
   * Sets the value of the 'value' field.
   * @param value the value to set.
   */
  public void setValue(java.lang.CharSequence value) {
    this.value = value;
  }

  /**
   * Creates a new DataExport RecordBuilder.
   * @return A new DataExport RecordBuilder
   */
  public static com.magnusp.DataExport.Builder newBuilder() {
    return new com.magnusp.DataExport.Builder();
  }

  /**
   * Creates a new DataExport RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DataExport RecordBuilder
   */
  public static com.magnusp.DataExport.Builder newBuilder(com.magnusp.DataExport.Builder other) {
    return new com.magnusp.DataExport.Builder(other);
  }

  /**
   * Creates a new DataExport RecordBuilder by copying an existing DataExport instance.
   * @param other The existing instance to copy.
   * @return A new DataExport RecordBuilder
   */
  public static com.magnusp.DataExport.Builder newBuilder(com.magnusp.DataExport other) {
    return new com.magnusp.DataExport.Builder(other);
  }

  /**
   * RecordBuilder for DataExport instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DataExport>
    implements org.apache.avro.data.RecordBuilder<DataExport> {

    private long rownr;
    private com.magnusp.Levels levels;
    private com.magnusp.Levels.Builder levelsBuilder;
    private java.lang.CharSequence key;
    private java.lang.CharSequence value;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.magnusp.DataExport.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.rownr)) {
        this.rownr = data().deepCopy(fields()[0].schema(), other.rownr);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.levels)) {
        this.levels = data().deepCopy(fields()[1].schema(), other.levels);
        fieldSetFlags()[1] = true;
      }
      if (other.hasLevelsBuilder()) {
        this.levelsBuilder = com.magnusp.Levels.newBuilder(other.getLevelsBuilder());
      }
      if (isValidValue(fields()[2], other.key)) {
        this.key = data().deepCopy(fields()[2].schema(), other.key);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.value)) {
        this.value = data().deepCopy(fields()[3].schema(), other.value);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing DataExport instance
     * @param other The existing instance to copy.
     */
    private Builder(com.magnusp.DataExport other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.rownr)) {
        this.rownr = data().deepCopy(fields()[0].schema(), other.rownr);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.levels)) {
        this.levels = data().deepCopy(fields()[1].schema(), other.levels);
        fieldSetFlags()[1] = true;
      }
      this.levelsBuilder = null;
      if (isValidValue(fields()[2], other.key)) {
        this.key = data().deepCopy(fields()[2].schema(), other.key);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.value)) {
        this.value = data().deepCopy(fields()[3].schema(), other.value);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'rownr' field.
      * @return The value.
      */
    public java.lang.Long getRownr() {
      return rownr;
    }

    /**
      * Sets the value of the 'rownr' field.
      * @param value The value of 'rownr'.
      * @return This builder.
      */
    public com.magnusp.DataExport.Builder setRownr(long value) {
      validate(fields()[0], value);
      this.rownr = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'rownr' field has been set.
      * @return True if the 'rownr' field has been set, false otherwise.
      */
    public boolean hasRownr() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'rownr' field.
      * @return This builder.
      */
    public com.magnusp.DataExport.Builder clearRownr() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'levels' field.
      * @return The value.
      */
    public com.magnusp.Levels getLevels() {
      return levels;
    }

    /**
      * Sets the value of the 'levels' field.
      * @param value The value of 'levels'.
      * @return This builder.
      */
    public com.magnusp.DataExport.Builder setLevels(com.magnusp.Levels value) {
      validate(fields()[1], value);
      this.levelsBuilder = null;
      this.levels = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'levels' field has been set.
      * @return True if the 'levels' field has been set, false otherwise.
      */
    public boolean hasLevels() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'levels' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.magnusp.Levels.Builder getLevelsBuilder() {
      if (levelsBuilder == null) {
        if (hasLevels()) {
          setLevelsBuilder(com.magnusp.Levels.newBuilder(levels));
        } else {
          setLevelsBuilder(com.magnusp.Levels.newBuilder());
        }
      }
      return levelsBuilder;
    }

    /**
     * Sets the Builder instance for the 'levels' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.magnusp.DataExport.Builder setLevelsBuilder(com.magnusp.Levels.Builder value) {
      clearLevels();
      levelsBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'levels' field has an active Builder instance
     * @return True if the 'levels' field has an active Builder instance
     */
    public boolean hasLevelsBuilder() {
      return levelsBuilder != null;
    }

    /**
      * Clears the value of the 'levels' field.
      * @return This builder.
      */
    public com.magnusp.DataExport.Builder clearLevels() {
      levels = null;
      levelsBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'key' field.
      * @return The value.
      */
    public java.lang.CharSequence getKey() {
      return key;
    }

    /**
      * Sets the value of the 'key' field.
      * @param value The value of 'key'.
      * @return This builder.
      */
    public com.magnusp.DataExport.Builder setKey(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.key = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'key' field has been set.
      * @return True if the 'key' field has been set, false otherwise.
      */
    public boolean hasKey() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'key' field.
      * @return This builder.
      */
    public com.magnusp.DataExport.Builder clearKey() {
      key = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'value' field.
      * @return The value.
      */
    public java.lang.CharSequence getValue() {
      return value;
    }

    /**
      * Sets the value of the 'value' field.
      * @param value The value of 'value'.
      * @return This builder.
      */
    public com.magnusp.DataExport.Builder setValue(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.value = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'value' field.
      * @return This builder.
      */
    public com.magnusp.DataExport.Builder clearValue() {
      value = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public DataExport build() {
      try {
        DataExport record = new DataExport();
        record.rownr = fieldSetFlags()[0] ? this.rownr : (java.lang.Long) defaultValue(fields()[0]);
        if (levelsBuilder != null) {
          record.levels = this.levelsBuilder.build();
        } else {
          record.levels = fieldSetFlags()[1] ? this.levels : (com.magnusp.Levels) defaultValue(fields()[1]);
        }
        record.key = fieldSetFlags()[2] ? this.key : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.value = fieldSetFlags()[3] ? this.value : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
