/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.magnusp;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Levels extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3934608597471614607L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Levels\",\"namespace\":\"com.magnusp\",\"fields\":[{\"name\":\"L1\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Level\",\"fields\":[{\"name\":\"node\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"attr_key\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"attr_value\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"L2\",\"type\":[\"null\",\"Level\"],\"default\":null},{\"name\":\"L3\",\"type\":[\"null\",\"Level\"],\"default\":null},{\"name\":\"L4\",\"type\":[\"null\",\"Level\"],\"default\":null},{\"name\":\"L5\",\"type\":[\"null\",\"Level\"],\"default\":null},{\"name\":\"L6\",\"type\":[\"null\",\"Level\"],\"default\":null},{\"name\":\"L7\",\"type\":[\"null\",\"Level\"],\"default\":null},{\"name\":\"L8\",\"type\":[\"null\",\"Level\"],\"default\":null},{\"name\":\"L9\",\"type\":[\"null\",\"Level\"],\"default\":null},{\"name\":\"L10\",\"type\":[\"null\",\"Level\"],\"default\":null},{\"name\":\"L11\",\"type\":[\"null\",\"Level\"],\"default\":null},{\"name\":\"L12\",\"type\":[\"null\",\"Level\"],\"default\":null},{\"name\":\"L13\",\"type\":[\"null\",\"Level\"],\"default\":null},{\"name\":\"L14\",\"type\":[\"null\",\"Level\"],\"default\":null},{\"name\":\"L15\",\"type\":[\"null\",\"Level\"],\"default\":null},{\"name\":\"L16\",\"type\":[\"null\",\"Level\"],\"default\":null},{\"name\":\"L17\",\"type\":[\"null\",\"Level\"],\"default\":null},{\"name\":\"L18\",\"type\":[\"null\",\"Level\"],\"default\":null},{\"name\":\"L19\",\"type\":[\"null\",\"Level\"],\"default\":null},{\"name\":\"L20\",\"type\":[\"null\",\"Level\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public com.magnusp.Level L1;
  @Deprecated public com.magnusp.Level L2;
  @Deprecated public com.magnusp.Level L3;
  @Deprecated public com.magnusp.Level L4;
  @Deprecated public com.magnusp.Level L5;
  @Deprecated public com.magnusp.Level L6;
  @Deprecated public com.magnusp.Level L7;
  @Deprecated public com.magnusp.Level L8;
  @Deprecated public com.magnusp.Level L9;
  @Deprecated public com.magnusp.Level L10;
  @Deprecated public com.magnusp.Level L11;
  @Deprecated public com.magnusp.Level L12;
  @Deprecated public com.magnusp.Level L13;
  @Deprecated public com.magnusp.Level L14;
  @Deprecated public com.magnusp.Level L15;
  @Deprecated public com.magnusp.Level L16;
  @Deprecated public com.magnusp.Level L17;
  @Deprecated public com.magnusp.Level L18;
  @Deprecated public com.magnusp.Level L19;
  @Deprecated public com.magnusp.Level L20;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Levels() {}

  /**
   * All-args constructor.
   * @param L1 The new value for L1
   * @param L2 The new value for L2
   * @param L3 The new value for L3
   * @param L4 The new value for L4
   * @param L5 The new value for L5
   * @param L6 The new value for L6
   * @param L7 The new value for L7
   * @param L8 The new value for L8
   * @param L9 The new value for L9
   * @param L10 The new value for L10
   * @param L11 The new value for L11
   * @param L12 The new value for L12
   * @param L13 The new value for L13
   * @param L14 The new value for L14
   * @param L15 The new value for L15
   * @param L16 The new value for L16
   * @param L17 The new value for L17
   * @param L18 The new value for L18
   * @param L19 The new value for L19
   * @param L20 The new value for L20
   */
  public Levels(com.magnusp.Level L1, com.magnusp.Level L2, com.magnusp.Level L3, com.magnusp.Level L4, com.magnusp.Level L5, com.magnusp.Level L6, com.magnusp.Level L7, com.magnusp.Level L8, com.magnusp.Level L9, com.magnusp.Level L10, com.magnusp.Level L11, com.magnusp.Level L12, com.magnusp.Level L13, com.magnusp.Level L14, com.magnusp.Level L15, com.magnusp.Level L16, com.magnusp.Level L17, com.magnusp.Level L18, com.magnusp.Level L19, com.magnusp.Level L20) {
    this.L1 = L1;
    this.L2 = L2;
    this.L3 = L3;
    this.L4 = L4;
    this.L5 = L5;
    this.L6 = L6;
    this.L7 = L7;
    this.L8 = L8;
    this.L9 = L9;
    this.L10 = L10;
    this.L11 = L11;
    this.L12 = L12;
    this.L13 = L13;
    this.L14 = L14;
    this.L15 = L15;
    this.L16 = L16;
    this.L17 = L17;
    this.L18 = L18;
    this.L19 = L19;
    this.L20 = L20;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return L1;
    case 1: return L2;
    case 2: return L3;
    case 3: return L4;
    case 4: return L5;
    case 5: return L6;
    case 6: return L7;
    case 7: return L8;
    case 8: return L9;
    case 9: return L10;
    case 10: return L11;
    case 11: return L12;
    case 12: return L13;
    case 13: return L14;
    case 14: return L15;
    case 15: return L16;
    case 16: return L17;
    case 17: return L18;
    case 18: return L19;
    case 19: return L20;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: L1 = (com.magnusp.Level)value$; break;
    case 1: L2 = (com.magnusp.Level)value$; break;
    case 2: L3 = (com.magnusp.Level)value$; break;
    case 3: L4 = (com.magnusp.Level)value$; break;
    case 4: L5 = (com.magnusp.Level)value$; break;
    case 5: L6 = (com.magnusp.Level)value$; break;
    case 6: L7 = (com.magnusp.Level)value$; break;
    case 7: L8 = (com.magnusp.Level)value$; break;
    case 8: L9 = (com.magnusp.Level)value$; break;
    case 9: L10 = (com.magnusp.Level)value$; break;
    case 10: L11 = (com.magnusp.Level)value$; break;
    case 11: L12 = (com.magnusp.Level)value$; break;
    case 12: L13 = (com.magnusp.Level)value$; break;
    case 13: L14 = (com.magnusp.Level)value$; break;
    case 14: L15 = (com.magnusp.Level)value$; break;
    case 15: L16 = (com.magnusp.Level)value$; break;
    case 16: L17 = (com.magnusp.Level)value$; break;
    case 17: L18 = (com.magnusp.Level)value$; break;
    case 18: L19 = (com.magnusp.Level)value$; break;
    case 19: L20 = (com.magnusp.Level)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'L1' field.
   * @return The value of the 'L1' field.
   */
  public com.magnusp.Level getL1() {
    return L1;
  }

  /**
   * Sets the value of the 'L1' field.
   * @param value the value to set.
   */
  public void setL1(com.magnusp.Level value) {
    this.L1 = value;
  }

  /**
   * Gets the value of the 'L2' field.
   * @return The value of the 'L2' field.
   */
  public com.magnusp.Level getL2() {
    return L2;
  }

  /**
   * Sets the value of the 'L2' field.
   * @param value the value to set.
   */
  public void setL2(com.magnusp.Level value) {
    this.L2 = value;
  }

  /**
   * Gets the value of the 'L3' field.
   * @return The value of the 'L3' field.
   */
  public com.magnusp.Level getL3() {
    return L3;
  }

  /**
   * Sets the value of the 'L3' field.
   * @param value the value to set.
   */
  public void setL3(com.magnusp.Level value) {
    this.L3 = value;
  }

  /**
   * Gets the value of the 'L4' field.
   * @return The value of the 'L4' field.
   */
  public com.magnusp.Level getL4() {
    return L4;
  }

  /**
   * Sets the value of the 'L4' field.
   * @param value the value to set.
   */
  public void setL4(com.magnusp.Level value) {
    this.L4 = value;
  }

  /**
   * Gets the value of the 'L5' field.
   * @return The value of the 'L5' field.
   */
  public com.magnusp.Level getL5() {
    return L5;
  }

  /**
   * Sets the value of the 'L5' field.
   * @param value the value to set.
   */
  public void setL5(com.magnusp.Level value) {
    this.L5 = value;
  }

  /**
   * Gets the value of the 'L6' field.
   * @return The value of the 'L6' field.
   */
  public com.magnusp.Level getL6() {
    return L6;
  }

  /**
   * Sets the value of the 'L6' field.
   * @param value the value to set.
   */
  public void setL6(com.magnusp.Level value) {
    this.L6 = value;
  }

  /**
   * Gets the value of the 'L7' field.
   * @return The value of the 'L7' field.
   */
  public com.magnusp.Level getL7() {
    return L7;
  }

  /**
   * Sets the value of the 'L7' field.
   * @param value the value to set.
   */
  public void setL7(com.magnusp.Level value) {
    this.L7 = value;
  }

  /**
   * Gets the value of the 'L8' field.
   * @return The value of the 'L8' field.
   */
  public com.magnusp.Level getL8() {
    return L8;
  }

  /**
   * Sets the value of the 'L8' field.
   * @param value the value to set.
   */
  public void setL8(com.magnusp.Level value) {
    this.L8 = value;
  }

  /**
   * Gets the value of the 'L9' field.
   * @return The value of the 'L9' field.
   */
  public com.magnusp.Level getL9() {
    return L9;
  }

  /**
   * Sets the value of the 'L9' field.
   * @param value the value to set.
   */
  public void setL9(com.magnusp.Level value) {
    this.L9 = value;
  }

  /**
   * Gets the value of the 'L10' field.
   * @return The value of the 'L10' field.
   */
  public com.magnusp.Level getL10() {
    return L10;
  }

  /**
   * Sets the value of the 'L10' field.
   * @param value the value to set.
   */
  public void setL10(com.magnusp.Level value) {
    this.L10 = value;
  }

  /**
   * Gets the value of the 'L11' field.
   * @return The value of the 'L11' field.
   */
  public com.magnusp.Level getL11() {
    return L11;
  }

  /**
   * Sets the value of the 'L11' field.
   * @param value the value to set.
   */
  public void setL11(com.magnusp.Level value) {
    this.L11 = value;
  }

  /**
   * Gets the value of the 'L12' field.
   * @return The value of the 'L12' field.
   */
  public com.magnusp.Level getL12() {
    return L12;
  }

  /**
   * Sets the value of the 'L12' field.
   * @param value the value to set.
   */
  public void setL12(com.magnusp.Level value) {
    this.L12 = value;
  }

  /**
   * Gets the value of the 'L13' field.
   * @return The value of the 'L13' field.
   */
  public com.magnusp.Level getL13() {
    return L13;
  }

  /**
   * Sets the value of the 'L13' field.
   * @param value the value to set.
   */
  public void setL13(com.magnusp.Level value) {
    this.L13 = value;
  }

  /**
   * Gets the value of the 'L14' field.
   * @return The value of the 'L14' field.
   */
  public com.magnusp.Level getL14() {
    return L14;
  }

  /**
   * Sets the value of the 'L14' field.
   * @param value the value to set.
   */
  public void setL14(com.magnusp.Level value) {
    this.L14 = value;
  }

  /**
   * Gets the value of the 'L15' field.
   * @return The value of the 'L15' field.
   */
  public com.magnusp.Level getL15() {
    return L15;
  }

  /**
   * Sets the value of the 'L15' field.
   * @param value the value to set.
   */
  public void setL15(com.magnusp.Level value) {
    this.L15 = value;
  }

  /**
   * Gets the value of the 'L16' field.
   * @return The value of the 'L16' field.
   */
  public com.magnusp.Level getL16() {
    return L16;
  }

  /**
   * Sets the value of the 'L16' field.
   * @param value the value to set.
   */
  public void setL16(com.magnusp.Level value) {
    this.L16 = value;
  }

  /**
   * Gets the value of the 'L17' field.
   * @return The value of the 'L17' field.
   */
  public com.magnusp.Level getL17() {
    return L17;
  }

  /**
   * Sets the value of the 'L17' field.
   * @param value the value to set.
   */
  public void setL17(com.magnusp.Level value) {
    this.L17 = value;
  }

  /**
   * Gets the value of the 'L18' field.
   * @return The value of the 'L18' field.
   */
  public com.magnusp.Level getL18() {
    return L18;
  }

  /**
   * Sets the value of the 'L18' field.
   * @param value the value to set.
   */
  public void setL18(com.magnusp.Level value) {
    this.L18 = value;
  }

  /**
   * Gets the value of the 'L19' field.
   * @return The value of the 'L19' field.
   */
  public com.magnusp.Level getL19() {
    return L19;
  }

  /**
   * Sets the value of the 'L19' field.
   * @param value the value to set.
   */
  public void setL19(com.magnusp.Level value) {
    this.L19 = value;
  }

  /**
   * Gets the value of the 'L20' field.
   * @return The value of the 'L20' field.
   */
  public com.magnusp.Level getL20() {
    return L20;
  }

  /**
   * Sets the value of the 'L20' field.
   * @param value the value to set.
   */
  public void setL20(com.magnusp.Level value) {
    this.L20 = value;
  }

  /**
   * Creates a new Levels RecordBuilder.
   * @return A new Levels RecordBuilder
   */
  public static com.magnusp.Levels.Builder newBuilder() {
    return new com.magnusp.Levels.Builder();
  }

  /**
   * Creates a new Levels RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Levels RecordBuilder
   */
  public static com.magnusp.Levels.Builder newBuilder(com.magnusp.Levels.Builder other) {
    return new com.magnusp.Levels.Builder(other);
  }

  /**
   * Creates a new Levels RecordBuilder by copying an existing Levels instance.
   * @param other The existing instance to copy.
   * @return A new Levels RecordBuilder
   */
  public static com.magnusp.Levels.Builder newBuilder(com.magnusp.Levels other) {
    return new com.magnusp.Levels.Builder(other);
  }

  /**
   * RecordBuilder for Levels instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Levels>
    implements org.apache.avro.data.RecordBuilder<Levels> {

    private com.magnusp.Level L1;
    private com.magnusp.Level.Builder L1Builder;
    private com.magnusp.Level L2;
    private com.magnusp.Level.Builder L2Builder;
    private com.magnusp.Level L3;
    private com.magnusp.Level.Builder L3Builder;
    private com.magnusp.Level L4;
    private com.magnusp.Level.Builder L4Builder;
    private com.magnusp.Level L5;
    private com.magnusp.Level.Builder L5Builder;
    private com.magnusp.Level L6;
    private com.magnusp.Level.Builder L6Builder;
    private com.magnusp.Level L7;
    private com.magnusp.Level.Builder L7Builder;
    private com.magnusp.Level L8;
    private com.magnusp.Level.Builder L8Builder;
    private com.magnusp.Level L9;
    private com.magnusp.Level.Builder L9Builder;
    private com.magnusp.Level L10;
    private com.magnusp.Level.Builder L10Builder;
    private com.magnusp.Level L11;
    private com.magnusp.Level.Builder L11Builder;
    private com.magnusp.Level L12;
    private com.magnusp.Level.Builder L12Builder;
    private com.magnusp.Level L13;
    private com.magnusp.Level.Builder L13Builder;
    private com.magnusp.Level L14;
    private com.magnusp.Level.Builder L14Builder;
    private com.magnusp.Level L15;
    private com.magnusp.Level.Builder L15Builder;
    private com.magnusp.Level L16;
    private com.magnusp.Level.Builder L16Builder;
    private com.magnusp.Level L17;
    private com.magnusp.Level.Builder L17Builder;
    private com.magnusp.Level L18;
    private com.magnusp.Level.Builder L18Builder;
    private com.magnusp.Level L19;
    private com.magnusp.Level.Builder L19Builder;
    private com.magnusp.Level L20;
    private com.magnusp.Level.Builder L20Builder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.magnusp.Levels.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.L1)) {
        this.L1 = data().deepCopy(fields()[0].schema(), other.L1);
        fieldSetFlags()[0] = true;
      }
      if (other.hasL1Builder()) {
        this.L1Builder = com.magnusp.Level.newBuilder(other.getL1Builder());
      }
      if (isValidValue(fields()[1], other.L2)) {
        this.L2 = data().deepCopy(fields()[1].schema(), other.L2);
        fieldSetFlags()[1] = true;
      }
      if (other.hasL2Builder()) {
        this.L2Builder = com.magnusp.Level.newBuilder(other.getL2Builder());
      }
      if (isValidValue(fields()[2], other.L3)) {
        this.L3 = data().deepCopy(fields()[2].schema(), other.L3);
        fieldSetFlags()[2] = true;
      }
      if (other.hasL3Builder()) {
        this.L3Builder = com.magnusp.Level.newBuilder(other.getL3Builder());
      }
      if (isValidValue(fields()[3], other.L4)) {
        this.L4 = data().deepCopy(fields()[3].schema(), other.L4);
        fieldSetFlags()[3] = true;
      }
      if (other.hasL4Builder()) {
        this.L4Builder = com.magnusp.Level.newBuilder(other.getL4Builder());
      }
      if (isValidValue(fields()[4], other.L5)) {
        this.L5 = data().deepCopy(fields()[4].schema(), other.L5);
        fieldSetFlags()[4] = true;
      }
      if (other.hasL5Builder()) {
        this.L5Builder = com.magnusp.Level.newBuilder(other.getL5Builder());
      }
      if (isValidValue(fields()[5], other.L6)) {
        this.L6 = data().deepCopy(fields()[5].schema(), other.L6);
        fieldSetFlags()[5] = true;
      }
      if (other.hasL6Builder()) {
        this.L6Builder = com.magnusp.Level.newBuilder(other.getL6Builder());
      }
      if (isValidValue(fields()[6], other.L7)) {
        this.L7 = data().deepCopy(fields()[6].schema(), other.L7);
        fieldSetFlags()[6] = true;
      }
      if (other.hasL7Builder()) {
        this.L7Builder = com.magnusp.Level.newBuilder(other.getL7Builder());
      }
      if (isValidValue(fields()[7], other.L8)) {
        this.L8 = data().deepCopy(fields()[7].schema(), other.L8);
        fieldSetFlags()[7] = true;
      }
      if (other.hasL8Builder()) {
        this.L8Builder = com.magnusp.Level.newBuilder(other.getL8Builder());
      }
      if (isValidValue(fields()[8], other.L9)) {
        this.L9 = data().deepCopy(fields()[8].schema(), other.L9);
        fieldSetFlags()[8] = true;
      }
      if (other.hasL9Builder()) {
        this.L9Builder = com.magnusp.Level.newBuilder(other.getL9Builder());
      }
      if (isValidValue(fields()[9], other.L10)) {
        this.L10 = data().deepCopy(fields()[9].schema(), other.L10);
        fieldSetFlags()[9] = true;
      }
      if (other.hasL10Builder()) {
        this.L10Builder = com.magnusp.Level.newBuilder(other.getL10Builder());
      }
      if (isValidValue(fields()[10], other.L11)) {
        this.L11 = data().deepCopy(fields()[10].schema(), other.L11);
        fieldSetFlags()[10] = true;
      }
      if (other.hasL11Builder()) {
        this.L11Builder = com.magnusp.Level.newBuilder(other.getL11Builder());
      }
      if (isValidValue(fields()[11], other.L12)) {
        this.L12 = data().deepCopy(fields()[11].schema(), other.L12);
        fieldSetFlags()[11] = true;
      }
      if (other.hasL12Builder()) {
        this.L12Builder = com.magnusp.Level.newBuilder(other.getL12Builder());
      }
      if (isValidValue(fields()[12], other.L13)) {
        this.L13 = data().deepCopy(fields()[12].schema(), other.L13);
        fieldSetFlags()[12] = true;
      }
      if (other.hasL13Builder()) {
        this.L13Builder = com.magnusp.Level.newBuilder(other.getL13Builder());
      }
      if (isValidValue(fields()[13], other.L14)) {
        this.L14 = data().deepCopy(fields()[13].schema(), other.L14);
        fieldSetFlags()[13] = true;
      }
      if (other.hasL14Builder()) {
        this.L14Builder = com.magnusp.Level.newBuilder(other.getL14Builder());
      }
      if (isValidValue(fields()[14], other.L15)) {
        this.L15 = data().deepCopy(fields()[14].schema(), other.L15);
        fieldSetFlags()[14] = true;
      }
      if (other.hasL15Builder()) {
        this.L15Builder = com.magnusp.Level.newBuilder(other.getL15Builder());
      }
      if (isValidValue(fields()[15], other.L16)) {
        this.L16 = data().deepCopy(fields()[15].schema(), other.L16);
        fieldSetFlags()[15] = true;
      }
      if (other.hasL16Builder()) {
        this.L16Builder = com.magnusp.Level.newBuilder(other.getL16Builder());
      }
      if (isValidValue(fields()[16], other.L17)) {
        this.L17 = data().deepCopy(fields()[16].schema(), other.L17);
        fieldSetFlags()[16] = true;
      }
      if (other.hasL17Builder()) {
        this.L17Builder = com.magnusp.Level.newBuilder(other.getL17Builder());
      }
      if (isValidValue(fields()[17], other.L18)) {
        this.L18 = data().deepCopy(fields()[17].schema(), other.L18);
        fieldSetFlags()[17] = true;
      }
      if (other.hasL18Builder()) {
        this.L18Builder = com.magnusp.Level.newBuilder(other.getL18Builder());
      }
      if (isValidValue(fields()[18], other.L19)) {
        this.L19 = data().deepCopy(fields()[18].schema(), other.L19);
        fieldSetFlags()[18] = true;
      }
      if (other.hasL19Builder()) {
        this.L19Builder = com.magnusp.Level.newBuilder(other.getL19Builder());
      }
      if (isValidValue(fields()[19], other.L20)) {
        this.L20 = data().deepCopy(fields()[19].schema(), other.L20);
        fieldSetFlags()[19] = true;
      }
      if (other.hasL20Builder()) {
        this.L20Builder = com.magnusp.Level.newBuilder(other.getL20Builder());
      }
    }

    /**
     * Creates a Builder by copying an existing Levels instance
     * @param other The existing instance to copy.
     */
    private Builder(com.magnusp.Levels other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.L1)) {
        this.L1 = data().deepCopy(fields()[0].schema(), other.L1);
        fieldSetFlags()[0] = true;
      }
      this.L1Builder = null;
      if (isValidValue(fields()[1], other.L2)) {
        this.L2 = data().deepCopy(fields()[1].schema(), other.L2);
        fieldSetFlags()[1] = true;
      }
      this.L2Builder = null;
      if (isValidValue(fields()[2], other.L3)) {
        this.L3 = data().deepCopy(fields()[2].schema(), other.L3);
        fieldSetFlags()[2] = true;
      }
      this.L3Builder = null;
      if (isValidValue(fields()[3], other.L4)) {
        this.L4 = data().deepCopy(fields()[3].schema(), other.L4);
        fieldSetFlags()[3] = true;
      }
      this.L4Builder = null;
      if (isValidValue(fields()[4], other.L5)) {
        this.L5 = data().deepCopy(fields()[4].schema(), other.L5);
        fieldSetFlags()[4] = true;
      }
      this.L5Builder = null;
      if (isValidValue(fields()[5], other.L6)) {
        this.L6 = data().deepCopy(fields()[5].schema(), other.L6);
        fieldSetFlags()[5] = true;
      }
      this.L6Builder = null;
      if (isValidValue(fields()[6], other.L7)) {
        this.L7 = data().deepCopy(fields()[6].schema(), other.L7);
        fieldSetFlags()[6] = true;
      }
      this.L7Builder = null;
      if (isValidValue(fields()[7], other.L8)) {
        this.L8 = data().deepCopy(fields()[7].schema(), other.L8);
        fieldSetFlags()[7] = true;
      }
      this.L8Builder = null;
      if (isValidValue(fields()[8], other.L9)) {
        this.L9 = data().deepCopy(fields()[8].schema(), other.L9);
        fieldSetFlags()[8] = true;
      }
      this.L9Builder = null;
      if (isValidValue(fields()[9], other.L10)) {
        this.L10 = data().deepCopy(fields()[9].schema(), other.L10);
        fieldSetFlags()[9] = true;
      }
      this.L10Builder = null;
      if (isValidValue(fields()[10], other.L11)) {
        this.L11 = data().deepCopy(fields()[10].schema(), other.L11);
        fieldSetFlags()[10] = true;
      }
      this.L11Builder = null;
      if (isValidValue(fields()[11], other.L12)) {
        this.L12 = data().deepCopy(fields()[11].schema(), other.L12);
        fieldSetFlags()[11] = true;
      }
      this.L12Builder = null;
      if (isValidValue(fields()[12], other.L13)) {
        this.L13 = data().deepCopy(fields()[12].schema(), other.L13);
        fieldSetFlags()[12] = true;
      }
      this.L13Builder = null;
      if (isValidValue(fields()[13], other.L14)) {
        this.L14 = data().deepCopy(fields()[13].schema(), other.L14);
        fieldSetFlags()[13] = true;
      }
      this.L14Builder = null;
      if (isValidValue(fields()[14], other.L15)) {
        this.L15 = data().deepCopy(fields()[14].schema(), other.L15);
        fieldSetFlags()[14] = true;
      }
      this.L15Builder = null;
      if (isValidValue(fields()[15], other.L16)) {
        this.L16 = data().deepCopy(fields()[15].schema(), other.L16);
        fieldSetFlags()[15] = true;
      }
      this.L16Builder = null;
      if (isValidValue(fields()[16], other.L17)) {
        this.L17 = data().deepCopy(fields()[16].schema(), other.L17);
        fieldSetFlags()[16] = true;
      }
      this.L17Builder = null;
      if (isValidValue(fields()[17], other.L18)) {
        this.L18 = data().deepCopy(fields()[17].schema(), other.L18);
        fieldSetFlags()[17] = true;
      }
      this.L18Builder = null;
      if (isValidValue(fields()[18], other.L19)) {
        this.L19 = data().deepCopy(fields()[18].schema(), other.L19);
        fieldSetFlags()[18] = true;
      }
      this.L19Builder = null;
      if (isValidValue(fields()[19], other.L20)) {
        this.L20 = data().deepCopy(fields()[19].schema(), other.L20);
        fieldSetFlags()[19] = true;
      }
      this.L20Builder = null;
    }

    /**
      * Gets the value of the 'L1' field.
      * @return The value.
      */
    public com.magnusp.Level getL1() {
      return L1;
    }

    /**
      * Sets the value of the 'L1' field.
      * @param value The value of 'L1'.
      * @return This builder.
      */
    public com.magnusp.Levels.Builder setL1(com.magnusp.Level value) {
      validate(fields()[0], value);
      this.L1Builder = null;
      this.L1 = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'L1' field has been set.
      * @return True if the 'L1' field has been set, false otherwise.
      */
    public boolean hasL1() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'L1' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.magnusp.Level.Builder getL1Builder() {
      if (L1Builder == null) {
        if (hasL1()) {
          setL1Builder(com.magnusp.Level.newBuilder(L1));
        } else {
          setL1Builder(com.magnusp.Level.newBuilder());
        }
      }
      return L1Builder;
    }

    /**
     * Sets the Builder instance for the 'L1' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.magnusp.Levels.Builder setL1Builder(com.magnusp.Level.Builder value) {
      clearL1();
      L1Builder = value;
      return this;
    }

    /**
     * Checks whether the 'L1' field has an active Builder instance
     * @return True if the 'L1' field has an active Builder instance
     */
    public boolean hasL1Builder() {
      return L1Builder != null;
    }

    /**
      * Clears the value of the 'L1' field.
      * @return This builder.
      */
    public com.magnusp.Levels.Builder clearL1() {
      L1 = null;
      L1Builder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'L2' field.
      * @return The value.
      */
    public com.magnusp.Level getL2() {
      return L2;
    }

    /**
      * Sets the value of the 'L2' field.
      * @param value The value of 'L2'.
      * @return This builder.
      */
    public com.magnusp.Levels.Builder setL2(com.magnusp.Level value) {
      validate(fields()[1], value);
      this.L2Builder = null;
      this.L2 = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'L2' field has been set.
      * @return True if the 'L2' field has been set, false otherwise.
      */
    public boolean hasL2() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'L2' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.magnusp.Level.Builder getL2Builder() {
      if (L2Builder == null) {
        if (hasL2()) {
          setL2Builder(com.magnusp.Level.newBuilder(L2));
        } else {
          setL2Builder(com.magnusp.Level.newBuilder());
        }
      }
      return L2Builder;
    }

    /**
     * Sets the Builder instance for the 'L2' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.magnusp.Levels.Builder setL2Builder(com.magnusp.Level.Builder value) {
      clearL2();
      L2Builder = value;
      return this;
    }

    /**
     * Checks whether the 'L2' field has an active Builder instance
     * @return True if the 'L2' field has an active Builder instance
     */
    public boolean hasL2Builder() {
      return L2Builder != null;
    }

    /**
      * Clears the value of the 'L2' field.
      * @return This builder.
      */
    public com.magnusp.Levels.Builder clearL2() {
      L2 = null;
      L2Builder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'L3' field.
      * @return The value.
      */
    public com.magnusp.Level getL3() {
      return L3;
    }

    /**
      * Sets the value of the 'L3' field.
      * @param value The value of 'L3'.
      * @return This builder.
      */
    public com.magnusp.Levels.Builder setL3(com.magnusp.Level value) {
      validate(fields()[2], value);
      this.L3Builder = null;
      this.L3 = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'L3' field has been set.
      * @return True if the 'L3' field has been set, false otherwise.
      */
    public boolean hasL3() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'L3' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.magnusp.Level.Builder getL3Builder() {
      if (L3Builder == null) {
        if (hasL3()) {
          setL3Builder(com.magnusp.Level.newBuilder(L3));
        } else {
          setL3Builder(com.magnusp.Level.newBuilder());
        }
      }
      return L3Builder;
    }

    /**
     * Sets the Builder instance for the 'L3' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.magnusp.Levels.Builder setL3Builder(com.magnusp.Level.Builder value) {
      clearL3();
      L3Builder = value;
      return this;
    }

    /**
     * Checks whether the 'L3' field has an active Builder instance
     * @return True if the 'L3' field has an active Builder instance
     */
    public boolean hasL3Builder() {
      return L3Builder != null;
    }

    /**
      * Clears the value of the 'L3' field.
      * @return This builder.
      */
    public com.magnusp.Levels.Builder clearL3() {
      L3 = null;
      L3Builder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'L4' field.
      * @return The value.
      */
    public com.magnusp.Level getL4() {
      return L4;
    }

    /**
      * Sets the value of the 'L4' field.
      * @param value The value of 'L4'.
      * @return This builder.
      */
    public com.magnusp.Levels.Builder setL4(com.magnusp.Level value) {
      validate(fields()[3], value);
      this.L4Builder = null;
      this.L4 = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'L4' field has been set.
      * @return True if the 'L4' field has been set, false otherwise.
      */
    public boolean hasL4() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'L4' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.magnusp.Level.Builder getL4Builder() {
      if (L4Builder == null) {
        if (hasL4()) {
          setL4Builder(com.magnusp.Level.newBuilder(L4));
        } else {
          setL4Builder(com.magnusp.Level.newBuilder());
        }
      }
      return L4Builder;
    }

    /**
     * Sets the Builder instance for the 'L4' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.magnusp.Levels.Builder setL4Builder(com.magnusp.Level.Builder value) {
      clearL4();
      L4Builder = value;
      return this;
    }

    /**
     * Checks whether the 'L4' field has an active Builder instance
     * @return True if the 'L4' field has an active Builder instance
     */
    public boolean hasL4Builder() {
      return L4Builder != null;
    }

    /**
      * Clears the value of the 'L4' field.
      * @return This builder.
      */
    public com.magnusp.Levels.Builder clearL4() {
      L4 = null;
      L4Builder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'L5' field.
      * @return The value.
      */
    public com.magnusp.Level getL5() {
      return L5;
    }

    /**
      * Sets the value of the 'L5' field.
      * @param value The value of 'L5'.
      * @return This builder.
      */
    public com.magnusp.Levels.Builder setL5(com.magnusp.Level value) {
      validate(fields()[4], value);
      this.L5Builder = null;
      this.L5 = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'L5' field has been set.
      * @return True if the 'L5' field has been set, false otherwise.
      */
    public boolean hasL5() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'L5' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.magnusp.Level.Builder getL5Builder() {
      if (L5Builder == null) {
        if (hasL5()) {
          setL5Builder(com.magnusp.Level.newBuilder(L5));
        } else {
          setL5Builder(com.magnusp.Level.newBuilder());
        }
      }
      return L5Builder;
    }

    /**
     * Sets the Builder instance for the 'L5' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.magnusp.Levels.Builder setL5Builder(com.magnusp.Level.Builder value) {
      clearL5();
      L5Builder = value;
      return this;
    }

    /**
     * Checks whether the 'L5' field has an active Builder instance
     * @return True if the 'L5' field has an active Builder instance
     */
    public boolean hasL5Builder() {
      return L5Builder != null;
    }

    /**
      * Clears the value of the 'L5' field.
      * @return This builder.
      */
    public com.magnusp.Levels.Builder clearL5() {
      L5 = null;
      L5Builder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'L6' field.
      * @return The value.
      */
    public com.magnusp.Level getL6() {
      return L6;
    }

    /**
      * Sets the value of the 'L6' field.
      * @param value The value of 'L6'.
      * @return This builder.
      */
    public com.magnusp.Levels.Builder setL6(com.magnusp.Level value) {
      validate(fields()[5], value);
      this.L6Builder = null;
      this.L6 = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'L6' field has been set.
      * @return True if the 'L6' field has been set, false otherwise.
      */
    public boolean hasL6() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'L6' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.magnusp.Level.Builder getL6Builder() {
      if (L6Builder == null) {
        if (hasL6()) {
          setL6Builder(com.magnusp.Level.newBuilder(L6));
        } else {
          setL6Builder(com.magnusp.Level.newBuilder());
        }
      }
      return L6Builder;
    }

    /**
     * Sets the Builder instance for the 'L6' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.magnusp.Levels.Builder setL6Builder(com.magnusp.Level.Builder value) {
      clearL6();
      L6Builder = value;
      return this;
    }

    /**
     * Checks whether the 'L6' field has an active Builder instance
     * @return True if the 'L6' field has an active Builder instance
     */
    public boolean hasL6Builder() {
      return L6Builder != null;
    }

    /**
      * Clears the value of the 'L6' field.
      * @return This builder.
      */
    public com.magnusp.Levels.Builder clearL6() {
      L6 = null;
      L6Builder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'L7' field.
      * @return The value.
      */
    public com.magnusp.Level getL7() {
      return L7;
    }

    /**
      * Sets the value of the 'L7' field.
      * @param value The value of 'L7'.
      * @return This builder.
      */
    public com.magnusp.Levels.Builder setL7(com.magnusp.Level value) {
      validate(fields()[6], value);
      this.L7Builder = null;
      this.L7 = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'L7' field has been set.
      * @return True if the 'L7' field has been set, false otherwise.
      */
    public boolean hasL7() {
      return fieldSetFlags()[6];
    }

    /**
     * Gets the Builder instance for the 'L7' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.magnusp.Level.Builder getL7Builder() {
      if (L7Builder == null) {
        if (hasL7()) {
          setL7Builder(com.magnusp.Level.newBuilder(L7));
        } else {
          setL7Builder(com.magnusp.Level.newBuilder());
        }
      }
      return L7Builder;
    }

    /**
     * Sets the Builder instance for the 'L7' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.magnusp.Levels.Builder setL7Builder(com.magnusp.Level.Builder value) {
      clearL7();
      L7Builder = value;
      return this;
    }

    /**
     * Checks whether the 'L7' field has an active Builder instance
     * @return True if the 'L7' field has an active Builder instance
     */
    public boolean hasL7Builder() {
      return L7Builder != null;
    }

    /**
      * Clears the value of the 'L7' field.
      * @return This builder.
      */
    public com.magnusp.Levels.Builder clearL7() {
      L7 = null;
      L7Builder = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'L8' field.
      * @return The value.
      */
    public com.magnusp.Level getL8() {
      return L8;
    }

    /**
      * Sets the value of the 'L8' field.
      * @param value The value of 'L8'.
      * @return This builder.
      */
    public com.magnusp.Levels.Builder setL8(com.magnusp.Level value) {
      validate(fields()[7], value);
      this.L8Builder = null;
      this.L8 = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'L8' field has been set.
      * @return True if the 'L8' field has been set, false otherwise.
      */
    public boolean hasL8() {
      return fieldSetFlags()[7];
    }

    /**
     * Gets the Builder instance for the 'L8' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.magnusp.Level.Builder getL8Builder() {
      if (L8Builder == null) {
        if (hasL8()) {
          setL8Builder(com.magnusp.Level.newBuilder(L8));
        } else {
          setL8Builder(com.magnusp.Level.newBuilder());
        }
      }
      return L8Builder;
    }

    /**
     * Sets the Builder instance for the 'L8' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.magnusp.Levels.Builder setL8Builder(com.magnusp.Level.Builder value) {
      clearL8();
      L8Builder = value;
      return this;
    }

    /**
     * Checks whether the 'L8' field has an active Builder instance
     * @return True if the 'L8' field has an active Builder instance
     */
    public boolean hasL8Builder() {
      return L8Builder != null;
    }

    /**
      * Clears the value of the 'L8' field.
      * @return This builder.
      */
    public com.magnusp.Levels.Builder clearL8() {
      L8 = null;
      L8Builder = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'L9' field.
      * @return The value.
      */
    public com.magnusp.Level getL9() {
      return L9;
    }

    /**
      * Sets the value of the 'L9' field.
      * @param value The value of 'L9'.
      * @return This builder.
      */
    public com.magnusp.Levels.Builder setL9(com.magnusp.Level value) {
      validate(fields()[8], value);
      this.L9Builder = null;
      this.L9 = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'L9' field has been set.
      * @return True if the 'L9' field has been set, false otherwise.
      */
    public boolean hasL9() {
      return fieldSetFlags()[8];
    }

    /**
     * Gets the Builder instance for the 'L9' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.magnusp.Level.Builder getL9Builder() {
      if (L9Builder == null) {
        if (hasL9()) {
          setL9Builder(com.magnusp.Level.newBuilder(L9));
        } else {
          setL9Builder(com.magnusp.Level.newBuilder());
        }
      }
      return L9Builder;
    }

    /**
     * Sets the Builder instance for the 'L9' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.magnusp.Levels.Builder setL9Builder(com.magnusp.Level.Builder value) {
      clearL9();
      L9Builder = value;
      return this;
    }

    /**
     * Checks whether the 'L9' field has an active Builder instance
     * @return True if the 'L9' field has an active Builder instance
     */
    public boolean hasL9Builder() {
      return L9Builder != null;
    }

    /**
      * Clears the value of the 'L9' field.
      * @return This builder.
      */
    public com.magnusp.Levels.Builder clearL9() {
      L9 = null;
      L9Builder = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'L10' field.
      * @return The value.
      */
    public com.magnusp.Level getL10() {
      return L10;
    }

    /**
      * Sets the value of the 'L10' field.
      * @param value The value of 'L10'.
      * @return This builder.
      */
    public com.magnusp.Levels.Builder setL10(com.magnusp.Level value) {
      validate(fields()[9], value);
      this.L10Builder = null;
      this.L10 = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'L10' field has been set.
      * @return True if the 'L10' field has been set, false otherwise.
      */
    public boolean hasL10() {
      return fieldSetFlags()[9];
    }

    /**
     * Gets the Builder instance for the 'L10' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.magnusp.Level.Builder getL10Builder() {
      if (L10Builder == null) {
        if (hasL10()) {
          setL10Builder(com.magnusp.Level.newBuilder(L10));
        } else {
          setL10Builder(com.magnusp.Level.newBuilder());
        }
      }
      return L10Builder;
    }

    /**
     * Sets the Builder instance for the 'L10' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.magnusp.Levels.Builder setL10Builder(com.magnusp.Level.Builder value) {
      clearL10();
      L10Builder = value;
      return this;
    }

    /**
     * Checks whether the 'L10' field has an active Builder instance
     * @return True if the 'L10' field has an active Builder instance
     */
    public boolean hasL10Builder() {
      return L10Builder != null;
    }

    /**
      * Clears the value of the 'L10' field.
      * @return This builder.
      */
    public com.magnusp.Levels.Builder clearL10() {
      L10 = null;
      L10Builder = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'L11' field.
      * @return The value.
      */
    public com.magnusp.Level getL11() {
      return L11;
    }

    /**
      * Sets the value of the 'L11' field.
      * @param value The value of 'L11'.
      * @return This builder.
      */
    public com.magnusp.Levels.Builder setL11(com.magnusp.Level value) {
      validate(fields()[10], value);
      this.L11Builder = null;
      this.L11 = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'L11' field has been set.
      * @return True if the 'L11' field has been set, false otherwise.
      */
    public boolean hasL11() {
      return fieldSetFlags()[10];
    }

    /**
     * Gets the Builder instance for the 'L11' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.magnusp.Level.Builder getL11Builder() {
      if (L11Builder == null) {
        if (hasL11()) {
          setL11Builder(com.magnusp.Level.newBuilder(L11));
        } else {
          setL11Builder(com.magnusp.Level.newBuilder());
        }
      }
      return L11Builder;
    }

    /**
     * Sets the Builder instance for the 'L11' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.magnusp.Levels.Builder setL11Builder(com.magnusp.Level.Builder value) {
      clearL11();
      L11Builder = value;
      return this;
    }

    /**
     * Checks whether the 'L11' field has an active Builder instance
     * @return True if the 'L11' field has an active Builder instance
     */
    public boolean hasL11Builder() {
      return L11Builder != null;
    }

    /**
      * Clears the value of the 'L11' field.
      * @return This builder.
      */
    public com.magnusp.Levels.Builder clearL11() {
      L11 = null;
      L11Builder = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'L12' field.
      * @return The value.
      */
    public com.magnusp.Level getL12() {
      return L12;
    }

    /**
      * Sets the value of the 'L12' field.
      * @param value The value of 'L12'.
      * @return This builder.
      */
    public com.magnusp.Levels.Builder setL12(com.magnusp.Level value) {
      validate(fields()[11], value);
      this.L12Builder = null;
      this.L12 = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'L12' field has been set.
      * @return True if the 'L12' field has been set, false otherwise.
      */
    public boolean hasL12() {
      return fieldSetFlags()[11];
    }

    /**
     * Gets the Builder instance for the 'L12' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.magnusp.Level.Builder getL12Builder() {
      if (L12Builder == null) {
        if (hasL12()) {
          setL12Builder(com.magnusp.Level.newBuilder(L12));
        } else {
          setL12Builder(com.magnusp.Level.newBuilder());
        }
      }
      return L12Builder;
    }

    /**
     * Sets the Builder instance for the 'L12' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.magnusp.Levels.Builder setL12Builder(com.magnusp.Level.Builder value) {
      clearL12();
      L12Builder = value;
      return this;
    }

    /**
     * Checks whether the 'L12' field has an active Builder instance
     * @return True if the 'L12' field has an active Builder instance
     */
    public boolean hasL12Builder() {
      return L12Builder != null;
    }

    /**
      * Clears the value of the 'L12' field.
      * @return This builder.
      */
    public com.magnusp.Levels.Builder clearL12() {
      L12 = null;
      L12Builder = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'L13' field.
      * @return The value.
      */
    public com.magnusp.Level getL13() {
      return L13;
    }

    /**
      * Sets the value of the 'L13' field.
      * @param value The value of 'L13'.
      * @return This builder.
      */
    public com.magnusp.Levels.Builder setL13(com.magnusp.Level value) {
      validate(fields()[12], value);
      this.L13Builder = null;
      this.L13 = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'L13' field has been set.
      * @return True if the 'L13' field has been set, false otherwise.
      */
    public boolean hasL13() {
      return fieldSetFlags()[12];
    }

    /**
     * Gets the Builder instance for the 'L13' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.magnusp.Level.Builder getL13Builder() {
      if (L13Builder == null) {
        if (hasL13()) {
          setL13Builder(com.magnusp.Level.newBuilder(L13));
        } else {
          setL13Builder(com.magnusp.Level.newBuilder());
        }
      }
      return L13Builder;
    }

    /**
     * Sets the Builder instance for the 'L13' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.magnusp.Levels.Builder setL13Builder(com.magnusp.Level.Builder value) {
      clearL13();
      L13Builder = value;
      return this;
    }

    /**
     * Checks whether the 'L13' field has an active Builder instance
     * @return True if the 'L13' field has an active Builder instance
     */
    public boolean hasL13Builder() {
      return L13Builder != null;
    }

    /**
      * Clears the value of the 'L13' field.
      * @return This builder.
      */
    public com.magnusp.Levels.Builder clearL13() {
      L13 = null;
      L13Builder = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'L14' field.
      * @return The value.
      */
    public com.magnusp.Level getL14() {
      return L14;
    }

    /**
      * Sets the value of the 'L14' field.
      * @param value The value of 'L14'.
      * @return This builder.
      */
    public com.magnusp.Levels.Builder setL14(com.magnusp.Level value) {
      validate(fields()[13], value);
      this.L14Builder = null;
      this.L14 = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'L14' field has been set.
      * @return True if the 'L14' field has been set, false otherwise.
      */
    public boolean hasL14() {
      return fieldSetFlags()[13];
    }

    /**
     * Gets the Builder instance for the 'L14' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.magnusp.Level.Builder getL14Builder() {
      if (L14Builder == null) {
        if (hasL14()) {
          setL14Builder(com.magnusp.Level.newBuilder(L14));
        } else {
          setL14Builder(com.magnusp.Level.newBuilder());
        }
      }
      return L14Builder;
    }

    /**
     * Sets the Builder instance for the 'L14' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.magnusp.Levels.Builder setL14Builder(com.magnusp.Level.Builder value) {
      clearL14();
      L14Builder = value;
      return this;
    }

    /**
     * Checks whether the 'L14' field has an active Builder instance
     * @return True if the 'L14' field has an active Builder instance
     */
    public boolean hasL14Builder() {
      return L14Builder != null;
    }

    /**
      * Clears the value of the 'L14' field.
      * @return This builder.
      */
    public com.magnusp.Levels.Builder clearL14() {
      L14 = null;
      L14Builder = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'L15' field.
      * @return The value.
      */
    public com.magnusp.Level getL15() {
      return L15;
    }

    /**
      * Sets the value of the 'L15' field.
      * @param value The value of 'L15'.
      * @return This builder.
      */
    public com.magnusp.Levels.Builder setL15(com.magnusp.Level value) {
      validate(fields()[14], value);
      this.L15Builder = null;
      this.L15 = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'L15' field has been set.
      * @return True if the 'L15' field has been set, false otherwise.
      */
    public boolean hasL15() {
      return fieldSetFlags()[14];
    }

    /**
     * Gets the Builder instance for the 'L15' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.magnusp.Level.Builder getL15Builder() {
      if (L15Builder == null) {
        if (hasL15()) {
          setL15Builder(com.magnusp.Level.newBuilder(L15));
        } else {
          setL15Builder(com.magnusp.Level.newBuilder());
        }
      }
      return L15Builder;
    }

    /**
     * Sets the Builder instance for the 'L15' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.magnusp.Levels.Builder setL15Builder(com.magnusp.Level.Builder value) {
      clearL15();
      L15Builder = value;
      return this;
    }

    /**
     * Checks whether the 'L15' field has an active Builder instance
     * @return True if the 'L15' field has an active Builder instance
     */
    public boolean hasL15Builder() {
      return L15Builder != null;
    }

    /**
      * Clears the value of the 'L15' field.
      * @return This builder.
      */
    public com.magnusp.Levels.Builder clearL15() {
      L15 = null;
      L15Builder = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'L16' field.
      * @return The value.
      */
    public com.magnusp.Level getL16() {
      return L16;
    }

    /**
      * Sets the value of the 'L16' field.
      * @param value The value of 'L16'.
      * @return This builder.
      */
    public com.magnusp.Levels.Builder setL16(com.magnusp.Level value) {
      validate(fields()[15], value);
      this.L16Builder = null;
      this.L16 = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'L16' field has been set.
      * @return True if the 'L16' field has been set, false otherwise.
      */
    public boolean hasL16() {
      return fieldSetFlags()[15];
    }

    /**
     * Gets the Builder instance for the 'L16' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.magnusp.Level.Builder getL16Builder() {
      if (L16Builder == null) {
        if (hasL16()) {
          setL16Builder(com.magnusp.Level.newBuilder(L16));
        } else {
          setL16Builder(com.magnusp.Level.newBuilder());
        }
      }
      return L16Builder;
    }

    /**
     * Sets the Builder instance for the 'L16' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.magnusp.Levels.Builder setL16Builder(com.magnusp.Level.Builder value) {
      clearL16();
      L16Builder = value;
      return this;
    }

    /**
     * Checks whether the 'L16' field has an active Builder instance
     * @return True if the 'L16' field has an active Builder instance
     */
    public boolean hasL16Builder() {
      return L16Builder != null;
    }

    /**
      * Clears the value of the 'L16' field.
      * @return This builder.
      */
    public com.magnusp.Levels.Builder clearL16() {
      L16 = null;
      L16Builder = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'L17' field.
      * @return The value.
      */
    public com.magnusp.Level getL17() {
      return L17;
    }

    /**
      * Sets the value of the 'L17' field.
      * @param value The value of 'L17'.
      * @return This builder.
      */
    public com.magnusp.Levels.Builder setL17(com.magnusp.Level value) {
      validate(fields()[16], value);
      this.L17Builder = null;
      this.L17 = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'L17' field has been set.
      * @return True if the 'L17' field has been set, false otherwise.
      */
    public boolean hasL17() {
      return fieldSetFlags()[16];
    }

    /**
     * Gets the Builder instance for the 'L17' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.magnusp.Level.Builder getL17Builder() {
      if (L17Builder == null) {
        if (hasL17()) {
          setL17Builder(com.magnusp.Level.newBuilder(L17));
        } else {
          setL17Builder(com.magnusp.Level.newBuilder());
        }
      }
      return L17Builder;
    }

    /**
     * Sets the Builder instance for the 'L17' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.magnusp.Levels.Builder setL17Builder(com.magnusp.Level.Builder value) {
      clearL17();
      L17Builder = value;
      return this;
    }

    /**
     * Checks whether the 'L17' field has an active Builder instance
     * @return True if the 'L17' field has an active Builder instance
     */
    public boolean hasL17Builder() {
      return L17Builder != null;
    }

    /**
      * Clears the value of the 'L17' field.
      * @return This builder.
      */
    public com.magnusp.Levels.Builder clearL17() {
      L17 = null;
      L17Builder = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'L18' field.
      * @return The value.
      */
    public com.magnusp.Level getL18() {
      return L18;
    }

    /**
      * Sets the value of the 'L18' field.
      * @param value The value of 'L18'.
      * @return This builder.
      */
    public com.magnusp.Levels.Builder setL18(com.magnusp.Level value) {
      validate(fields()[17], value);
      this.L18Builder = null;
      this.L18 = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'L18' field has been set.
      * @return True if the 'L18' field has been set, false otherwise.
      */
    public boolean hasL18() {
      return fieldSetFlags()[17];
    }

    /**
     * Gets the Builder instance for the 'L18' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.magnusp.Level.Builder getL18Builder() {
      if (L18Builder == null) {
        if (hasL18()) {
          setL18Builder(com.magnusp.Level.newBuilder(L18));
        } else {
          setL18Builder(com.magnusp.Level.newBuilder());
        }
      }
      return L18Builder;
    }

    /**
     * Sets the Builder instance for the 'L18' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.magnusp.Levels.Builder setL18Builder(com.magnusp.Level.Builder value) {
      clearL18();
      L18Builder = value;
      return this;
    }

    /**
     * Checks whether the 'L18' field has an active Builder instance
     * @return True if the 'L18' field has an active Builder instance
     */
    public boolean hasL18Builder() {
      return L18Builder != null;
    }

    /**
      * Clears the value of the 'L18' field.
      * @return This builder.
      */
    public com.magnusp.Levels.Builder clearL18() {
      L18 = null;
      L18Builder = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'L19' field.
      * @return The value.
      */
    public com.magnusp.Level getL19() {
      return L19;
    }

    /**
      * Sets the value of the 'L19' field.
      * @param value The value of 'L19'.
      * @return This builder.
      */
    public com.magnusp.Levels.Builder setL19(com.magnusp.Level value) {
      validate(fields()[18], value);
      this.L19Builder = null;
      this.L19 = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'L19' field has been set.
      * @return True if the 'L19' field has been set, false otherwise.
      */
    public boolean hasL19() {
      return fieldSetFlags()[18];
    }

    /**
     * Gets the Builder instance for the 'L19' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.magnusp.Level.Builder getL19Builder() {
      if (L19Builder == null) {
        if (hasL19()) {
          setL19Builder(com.magnusp.Level.newBuilder(L19));
        } else {
          setL19Builder(com.magnusp.Level.newBuilder());
        }
      }
      return L19Builder;
    }

    /**
     * Sets the Builder instance for the 'L19' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.magnusp.Levels.Builder setL19Builder(com.magnusp.Level.Builder value) {
      clearL19();
      L19Builder = value;
      return this;
    }

    /**
     * Checks whether the 'L19' field has an active Builder instance
     * @return True if the 'L19' field has an active Builder instance
     */
    public boolean hasL19Builder() {
      return L19Builder != null;
    }

    /**
      * Clears the value of the 'L19' field.
      * @return This builder.
      */
    public com.magnusp.Levels.Builder clearL19() {
      L19 = null;
      L19Builder = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'L20' field.
      * @return The value.
      */
    public com.magnusp.Level getL20() {
      return L20;
    }

    /**
      * Sets the value of the 'L20' field.
      * @param value The value of 'L20'.
      * @return This builder.
      */
    public com.magnusp.Levels.Builder setL20(com.magnusp.Level value) {
      validate(fields()[19], value);
      this.L20Builder = null;
      this.L20 = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'L20' field has been set.
      * @return True if the 'L20' field has been set, false otherwise.
      */
    public boolean hasL20() {
      return fieldSetFlags()[19];
    }

    /**
     * Gets the Builder instance for the 'L20' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.magnusp.Level.Builder getL20Builder() {
      if (L20Builder == null) {
        if (hasL20()) {
          setL20Builder(com.magnusp.Level.newBuilder(L20));
        } else {
          setL20Builder(com.magnusp.Level.newBuilder());
        }
      }
      return L20Builder;
    }

    /**
     * Sets the Builder instance for the 'L20' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.magnusp.Levels.Builder setL20Builder(com.magnusp.Level.Builder value) {
      clearL20();
      L20Builder = value;
      return this;
    }

    /**
     * Checks whether the 'L20' field has an active Builder instance
     * @return True if the 'L20' field has an active Builder instance
     */
    public boolean hasL20Builder() {
      return L20Builder != null;
    }

    /**
      * Clears the value of the 'L20' field.
      * @return This builder.
      */
    public com.magnusp.Levels.Builder clearL20() {
      L20 = null;
      L20Builder = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    @Override
    public Levels build() {
      try {
        Levels record = new Levels();
        if (L1Builder != null) {
          record.L1 = this.L1Builder.build();
        } else {
          record.L1 = fieldSetFlags()[0] ? this.L1 : (com.magnusp.Level) defaultValue(fields()[0]);
        }
        if (L2Builder != null) {
          record.L2 = this.L2Builder.build();
        } else {
          record.L2 = fieldSetFlags()[1] ? this.L2 : (com.magnusp.Level) defaultValue(fields()[1]);
        }
        if (L3Builder != null) {
          record.L3 = this.L3Builder.build();
        } else {
          record.L3 = fieldSetFlags()[2] ? this.L3 : (com.magnusp.Level) defaultValue(fields()[2]);
        }
        if (L4Builder != null) {
          record.L4 = this.L4Builder.build();
        } else {
          record.L4 = fieldSetFlags()[3] ? this.L4 : (com.magnusp.Level) defaultValue(fields()[3]);
        }
        if (L5Builder != null) {
          record.L5 = this.L5Builder.build();
        } else {
          record.L5 = fieldSetFlags()[4] ? this.L5 : (com.magnusp.Level) defaultValue(fields()[4]);
        }
        if (L6Builder != null) {
          record.L6 = this.L6Builder.build();
        } else {
          record.L6 = fieldSetFlags()[5] ? this.L6 : (com.magnusp.Level) defaultValue(fields()[5]);
        }
        if (L7Builder != null) {
          record.L7 = this.L7Builder.build();
        } else {
          record.L7 = fieldSetFlags()[6] ? this.L7 : (com.magnusp.Level) defaultValue(fields()[6]);
        }
        if (L8Builder != null) {
          record.L8 = this.L8Builder.build();
        } else {
          record.L8 = fieldSetFlags()[7] ? this.L8 : (com.magnusp.Level) defaultValue(fields()[7]);
        }
        if (L9Builder != null) {
          record.L9 = this.L9Builder.build();
        } else {
          record.L9 = fieldSetFlags()[8] ? this.L9 : (com.magnusp.Level) defaultValue(fields()[8]);
        }
        if (L10Builder != null) {
          record.L10 = this.L10Builder.build();
        } else {
          record.L10 = fieldSetFlags()[9] ? this.L10 : (com.magnusp.Level) defaultValue(fields()[9]);
        }
        if (L11Builder != null) {
          record.L11 = this.L11Builder.build();
        } else {
          record.L11 = fieldSetFlags()[10] ? this.L11 : (com.magnusp.Level) defaultValue(fields()[10]);
        }
        if (L12Builder != null) {
          record.L12 = this.L12Builder.build();
        } else {
          record.L12 = fieldSetFlags()[11] ? this.L12 : (com.magnusp.Level) defaultValue(fields()[11]);
        }
        if (L13Builder != null) {
          record.L13 = this.L13Builder.build();
        } else {
          record.L13 = fieldSetFlags()[12] ? this.L13 : (com.magnusp.Level) defaultValue(fields()[12]);
        }
        if (L14Builder != null) {
          record.L14 = this.L14Builder.build();
        } else {
          record.L14 = fieldSetFlags()[13] ? this.L14 : (com.magnusp.Level) defaultValue(fields()[13]);
        }
        if (L15Builder != null) {
          record.L15 = this.L15Builder.build();
        } else {
          record.L15 = fieldSetFlags()[14] ? this.L15 : (com.magnusp.Level) defaultValue(fields()[14]);
        }
        if (L16Builder != null) {
          record.L16 = this.L16Builder.build();
        } else {
          record.L16 = fieldSetFlags()[15] ? this.L16 : (com.magnusp.Level) defaultValue(fields()[15]);
        }
        if (L17Builder != null) {
          record.L17 = this.L17Builder.build();
        } else {
          record.L17 = fieldSetFlags()[16] ? this.L17 : (com.magnusp.Level) defaultValue(fields()[16]);
        }
        if (L18Builder != null) {
          record.L18 = this.L18Builder.build();
        } else {
          record.L18 = fieldSetFlags()[17] ? this.L18 : (com.magnusp.Level) defaultValue(fields()[17]);
        }
        if (L19Builder != null) {
          record.L19 = this.L19Builder.build();
        } else {
          record.L19 = fieldSetFlags()[18] ? this.L19 : (com.magnusp.Level) defaultValue(fields()[18]);
        }
        if (L20Builder != null) {
          record.L20 = this.L20Builder.build();
        } else {
          record.L20 = fieldSetFlags()[19] ? this.L20 : (com.magnusp.Level) defaultValue(fields()[19]);
        }
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
